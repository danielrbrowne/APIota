import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

/// Defines an API endpoint for a Client whose body is an URL encoded form.
///
/// The definition must include a `requestBodyQueryItems` array.
public protocol APIotaURLEncodedFormEndpoint: APIotaCodableEndpoint where Body == Data {

    /// A `URLQueryItem` array used for defining the `httpBody` of a
    /// initialized `URLRequest` generated by the receiver.
    var requestBodyQueryItems: [URLQueryItem] { get }
}

// MARK: - Default method implementations

public extension APIotaURLEncodedFormEndpoint {

    /// A `Body` which is UTF-8 encoded `Data`, computed from `requestBodyQueryItems`.
    var httpBody: Body? {
        var requestBodyComponents = URLComponents()
        requestBodyComponents.queryItems = requestBodyQueryItems

        return requestBodyComponents.query?.data(using: .utf8)
    }

    /// The `HTTPMethod` for the receiver is by definition set to POST.
    var httpMethod: HTTPMethod {
        .POST
    }

    func request(baseUrlComponents: URLComponents) throws -> URLRequest {

        var requestUrlComponents = baseUrlComponents
        requestUrlComponents.path = path
        requestUrlComponents.queryItems = queryItems

        guard let requestUrl = requestUrlComponents.url else {
            throw APIotaClientError<ErrorResponse>.clientSide
        }

        var request = URLRequest(url: requestUrl)
        request.httpMethod = httpMethod.rawValue
        request.httpBody = httpBody

        if let headers = headers {
            request.allHTTPHeaderFields = headers.allHTTPHeaderFields
        }

        return request
    }
}
