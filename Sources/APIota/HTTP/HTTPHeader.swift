import Foundation

/// Describes a HTTP header field by name.
///
/// Also contains all HTTP permanent message header field names,
/// referenced from: https://www.iana.org/assignments/message-headers/message-headers.xhtml
public struct HTTPHeader {

    // MARK: Internal variables

    internal let stringValue: String

    // MARK: - Initialization

    /// Initializes a `HTTPHeader` based on a given name.
    /// - Parameter name: The string used to specify the name of the initialized `HTTPHeader`.
    public init(_ name: String) {
        self.stringValue = name
    }

    // MARK: - HTTP permanent message header field names

    public static let aIM = HTTPHeader("A-IM")
    public static let accept = HTTPHeader("Accept")
    public static let acceptAdditions = HTTPHeader("Accept-Additions")
    public static let acceptCharset = HTTPHeader("Accept-Charset")
    public static let acceptDatetime = HTTPHeader("Accept-Datetime")
    public static let acceptEncoding = HTTPHeader("Accept-Encoding")
    public static let acceptFeatures = HTTPHeader("Accept-Features")
    public static let acceptLanguage = HTTPHeader("Accept-Language")
    public static let acceptPatch = HTTPHeader("Accept-Patch")
    public static let acceptPost = HTTPHeader("Accept-Post")
    public static let acceptRanges = HTTPHeader("Accept-Ranges")
    public static let age = HTTPHeader("Age")
    public static let allow = HTTPHeader("Allow")
    public static let alpn = HTTPHeader("ALPN")
    public static let altSvc = HTTPHeader("Alt-Svc")
    public static let altUsed = HTTPHeader("Alt-Used")
    public static let alternates = HTTPHeader("Alternates")
    public static let applyToRedirectRef = HTTPHeader("Apply-To-Redirect-Ref")
    public static let authenticationControl = HTTPHeader("Authentication-Control")
    public static let authenticationInfo = HTTPHeader("Authentication-Info")
    public static let authorization = HTTPHeader("Authorization")
    public static let cExt = HTTPHeader("C-Ext")
    public static let cMan = HTTPHeader("C-Man")
    public static let cOpt = HTTPHeader("C-Opt")
    public static let cPEP = HTTPHeader("C-PEP")
    public static let cPEPInfo = HTTPHeader("C-PEP-Info")
    public static let cacheControl = HTTPHeader("Cache-Control")
    public static let calManagedId = HTTPHeader("Cal-Managed-ID")
    public static let calDAVTimezones = HTTPHeader("CalDAV-Timezones")
    public static let cdnLoop = HTTPHeader("CDN-Loop")
    public static let certNotAfter = HTTPHeader("Cert-Not-After")
    public static let certNotBefore = HTTPHeader("Cert-Not-Before")
    public static let close = HTTPHeader("Close")
    public static let connection = HTTPHeader("Connection")
    public static let contentBase = HTTPHeader("Content-Base")
    public static let contentDisposition = HTTPHeader("Content-Disposition")
    public static let contentEncoding = HTTPHeader("Content-Encoding")
    public static let contentId = HTTPHeader("Content-ID")
    public static let contentLanguage = HTTPHeader("Content-Language")
    public static let contentLength = HTTPHeader("Content-Length")
    public static let contentLocation = HTTPHeader("Content-Location")
    public static let contentMD5 = HTTPHeader("Content-MD5")
    public static let contentRange = HTTPHeader("Content-Range")
    public static let contentScriptType = HTTPHeader("Content-Script-Type")
    public static let contentStyleType = HTTPHeader("Content-Style-Type")
    public static let contentType = HTTPHeader("Content-Type")
    public static let contentVersion = HTTPHeader("Content-Version")
    public static let cookie = HTTPHeader("Cookie")
    public static let cookie2 = HTTPHeader("Cookie2")
    public static let dasl = HTTPHeader("DASL")
    public static let dav = HTTPHeader("DAV")
    public static let date = HTTPHeader("Date")
    public static let defaultStyle = HTTPHeader("Default-Style")
    public static let deltaBase = HTTPHeader("Delta-Base")
    public static let depth = HTTPHeader("Depth")
    public static let derivedFrom = HTTPHeader("Derived-From")
    public static let destination = HTTPHeader("Destination")
    public static let differentialId = HTTPHeader("Differential-ID")
    public static let digest = HTTPHeader("Digest")
    public static let earlyData = HTTPHeader("Early-Data")
    public static let eTag = HTTPHeader("ETag")
    public static let expect = HTTPHeader("Expect")
    public static let expectCT = HTTPHeader("Expect-CT")
    public static let expires = HTTPHeader("Expires")
    public static let ext = HTTPHeader("Ext")
    public static let forwarded = HTTPHeader("Forwarded")
    public static let from = HTTPHeader("From")
    public static let getProfile = HTTPHeader("GetProfile")
    public static let hobareg = HTTPHeader("Hobareg")
    public static let host = HTTPHeader("Host")
    public static let http2Settings = HTTPHeader("HTTP2-Settings")
    public static let im = HTTPHeader("IM")
    public static let `if` = HTTPHeader("If")
    public static let ifMatch = HTTPHeader("If-Match")
    public static let ifModifiedSince = HTTPHeader("If-Modified-Since")
    public static let ifNoneMatch = HTTPHeader("If-None-Match")
    public static let ifRange = HTTPHeader("If-Range")
    public static let ifScheduledTagMatch = HTTPHeader("If-Schedule-Tag-Match")
    public static let ifUnmodifiedSince = HTTPHeader("If-Unmodified-Since")
    public static let includeRefferedTokenBindingId = HTTPHeader("Include-Referred-Token-Binding-ID")
    public static let keepAlive = HTTPHeader("Keep-Alive")
    public static let label = HTTPHeader("Label")
    public static let lastModified = HTTPHeader("Last-Modified")
    public static let link = HTTPHeader("Link")
    public static let location = HTTPHeader("Location")
    public static let lockToken = HTTPHeader("Lock-Token")
    public static let man = HTTPHeader("Man")
    public static let maxForwards = HTTPHeader("Max-Forwards")
    public static let mementoDatetime = HTTPHeader("Memento-Datetime")
    public static let meter = HTTPHeader("Meter")
    public static let mimeVersion = HTTPHeader("MIME-Version")
    public static let negotiate = HTTPHeader("Negotiate")
    public static let oDataEntityId = HTTPHeader("OData-EntityId")
    public static let oDataIsolation = HTTPHeader("OData-Isolation")
    public static let oDataMaxVersion = HTTPHeader("OData-MaxVersion")
    public static let oDataVersion = HTTPHeader("OData-Version")
    public static let opt = HTTPHeader("Opt")
    public static let optionalWWWAuthenticate = HTTPHeader("Optional-WWW-Authenticate")
    public static let orderingType = HTTPHeader("Ordering-Type")
    public static let origin = HTTPHeader("Origin")
    public static let oscore = HTTPHeader("OSCORE")
    public static let overwrite = HTTPHeader("Overwrite")
    public static let p3p = HTTPHeader("P3P")
    public static let pep = HTTPHeader("PEP")
    public static let picsLabel = HTTPHeader("PICS-Label")
    public static let pepInfo = HTTPHeader("Pep-Info")
    public static let position = HTTPHeader("Position")
    public static let pragma = HTTPHeader("Pragma")
    public static let prefer = HTTPHeader("Prefer")
    public static let preferenceApplied = HTTPHeader("Preference-Applied")
    public static let profileObject = HTTPHeader("ProfileObject")
    public static let `protocol` = HTTPHeader("Protocol")
    public static let protocolInfo = HTTPHeader("Protocol-Info")
    public static let protocolQuery = HTTPHeader("Protocol-Query")
    public static let protocolRequest = HTTPHeader("Protocol-Request")
    public static let proxyAuthenticate = HTTPHeader("Proxy-Authenticate")
    public static let proxyAuthenticationInfo = HTTPHeader("Proxy-Authentication-Info")
    public static let proxyAuthorization = HTTPHeader("Proxy-Authorization")
    public static let proxyFeatures = HTTPHeader("Proxy-Features")
    public static let proxyInstruction = HTTPHeader("Proxy-Instruction")
    public static let `public` = HTTPHeader("Public")
    public static let publicKeyPins = HTTPHeader("Public-Key-Pins")
    public static let publicKeyPinsReportOnly = HTTPHeader("Public-Key-Pins-Report-Only")
    public static let range = HTTPHeader("Range")
    public static let redirectRef = HTTPHeader("Redirect-Ref")
    public static let referer = HTTPHeader("Referer")
    public static let replayNotice = HTTPHeader("Replay-Nonce")
    public static let retryAfter = HTTPHeader("Retry-After")
    public static let safe = HTTPHeader("Safe")
    public static let scheduleReply = HTTPHeader("Schedule-Reply")
    public static let scheduleTag = HTTPHeader("Schedule-Tag")
    public static let secTokenBinding = HTTPHeader("Sec-Token-Binding")
    public static let secWebsocketAccept = HTTPHeader("Sec-WebSocket-Accept")
    public static let secWebsocketExtensions = HTTPHeader("Sec-WebSocket-Extensions")
    public static let secWebsocketKey = HTTPHeader("Sec-WebSocket-Key")
    public static let secWebsocketProtocol = HTTPHeader("Sec-WebSocket-Protocol")
    public static let secWebsocketVersion = HTTPHeader("Sec-WebSocket-Version")
    public static let securityScheme = HTTPHeader("Security-Scheme")
    public static let server = HTTPHeader("Server")
    public static let setCookie = HTTPHeader("Set-Cookie")
    public static let setCookie2 = HTTPHeader("Set-Cookie2")
    public static let setProfile = HTTPHeader("SetProfile")
    public static let slug = HTTPHeader("SLUG")
    public static let soapAuction = HTTPHeader("SoapAction")
    public static let statusUri = HTTPHeader("Status-URI")
    public static let strictTransportSecurity = HTTPHeader("Strict-Transport-Security")
    public static let sunset = HTTPHeader("Sunset")
    public static let surrogateCapability = HTTPHeader("Surrogate-Capability")
    public static let surrogateControl = HTTPHeader("Surrogate-Control")
    public static let tcn = HTTPHeader("TCN")
    public static let te = HTTPHeader("TE")
    public static let timeout = HTTPHeader("Timeout")
    public static let topic = HTTPHeader("Topic")
    public static let trailer = HTTPHeader("Trailer")
    public static let transferEncoding = HTTPHeader("Transfer-Encoding")
    public static let ttl = HTTPHeader("TTL")
    public static let urgency = HTTPHeader("Urgency")
    public static let uri = HTTPHeader("URI")
    public static let upgrade = HTTPHeader("Upgrade")
    public static let userAgent = HTTPHeader("User-Agent")
    public static let variantVary = HTTPHeader("Variant-Vary")
    public static let vary = HTTPHeader("Vary")
    public static let via = HTTPHeader("Via")
    public static let wwwAuthenticate = HTTPHeader("WWW-Authenticate")
    public static let wantDigest = HTTPHeader("Want-Digest")
    public static let warning = HTTPHeader("Warning")
    public static let xContentTypeOptions = HTTPHeader("X-Content-Type-Options")
    public static let xFrameOptions = HTTPHeader("X-Frame-Options")
}

// MARK: - Hashable conformance

extension HTTPHeader: Hashable {

    public func hash(into hasher: inout Hasher) {
        self.stringValue.hash(into: &hasher)
    }

}
