import Foundation
#if canImport(FoundationNetworking)
import FoundationNetworking
#endif

/// Defines an API endpoint for a Client.
///
/// The definition must include a `path` and a `httpMethod`.
/// It can also optionaly include definitions for `headers`, `httpBody` and `queryItems`.
public protocol APIotaCodableEndpoint {

    /// A type alias for the decoded object for the successful response to a `URLRequest`.
    associatedtype SuccessResponse: Decodable

    /// A type alias for the decoded object for the error response to a `URLRequest`.
    associatedtype ErrorResponse: Decodable

    /// A type alias for the encoded data attached to the body of a `URLRequest`.
    associatedtype Body: Encodable

    /// A `JSONEncoder` to use for encoding body data to the requests generated by the receiver.
    var encoder: JSONEncoder { get }

    /// A `HTTPHeaders` instance used for configuring the HTTP headers attached
    /// to an initialized `URLRequest` generated by the endpoint.
    var headers: HTTPHeaders? { get }

    /// An optional `Body`.
    var httpBody: Body? { get }

    /// A `HTTPMethod` to use when initializing a `URLRequest` generated by the endpoint.
    var httpMethod: HTTPMethod { get }

    /// A `String` defining the `path` component of the endpoint URL
    /// (i.e. appended after the `host` component).
    var path: String { get }

    /// An optional array of `URLQueryItem`s to use for the `query` component of the endpoint URL.
    var queryItems: [URLQueryItem]? { get }

    /// Generates a `URLRequest` ready for use.
    /// - Parameter baseUrlComponents: `URLComponents` defining the base URL of the API Client.
    /// - Returns: A `URLRequest` configured according to the receiver's definition.
    func request(baseUrlComponents: URLComponents) throws -> URLRequest
}

// MARK: - Default method implementations

public extension APIotaCodableEndpoint {

    func request(baseUrlComponents: URLComponents) throws -> URLRequest {

        var requestUrlComponents = baseUrlComponents
        requestUrlComponents.path = path
        requestUrlComponents.queryItems = queryItems

        guard let requestUrl = requestUrlComponents.url else {
            throw APIotaClientError<ErrorResponse>.clientSide
        }

        var request = URLRequest(url: requestUrl)
        request.httpMethod = httpMethod.rawValue

        if let httpBody = httpBody {
            do {
                let bodyData = try encoder.encode(httpBody)
                request.httpBody = bodyData
            } catch let error as EncodingError {
                throw APIotaClientError<ErrorResponse>.encodingError(error)
            } catch {
                throw APIotaClientError<ErrorResponse>.internalError(error)
            }
        }

        if let headers = headers {
            request.allHTTPHeaderFields = headers.allHTTPHeaderFields
        }

        return request
    }
}
